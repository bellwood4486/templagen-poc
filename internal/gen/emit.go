package gen

import (
	"fmt"
	"maps"
	"slices"
	"strings"
)

type Unit struct {
	Pkg           string // 出力パッケージ名
	SourcePath    string // 埋め込むテンプレファイルのパス
	SourceLiteral string // テンプレ本文
}

func Emit(u Unit) (string, error) {
	imports := map[string]struct{}{
		"io":            {},
		"text/template": {},
		"embed":         {},
	}

	var b strings.Builder
	fmt.Fprintf(&b, "// Code generated by templagen; DO NOT EDIT.\n")
	fmt.Fprintf(&b, "package %s\n\n", u.Pkg)

	// import セクション
	fmt.Fprintf(&b, "import (\n")
	keys := slices.Sorted(maps.Keys(imports))
	for _, k := range keys {
		if k == "embed" {
			fmt.Fprintf(&b, "\t_ %q\n", k)
		} else {
			fmt.Fprintf(&b, "\t%q\n", k)
		}
	}
	fmt.Fprintf(&b, ")\n\n")

	// go:embed + Template + RenderAny
	fmt.Fprintf(&b, "//go:embed %s\n", u.SourcePath)
	fmt.Fprintf(&b, "var tplSource string\n\n")

	fmt.Fprintf(&b, "func Template() *template.Template {\n")
	fmt.Fprintf(&b, "\treturn template.Must(template.New(%q).Option(%q).Parse(tplSource))\n", "tpl", "missingkey=error")
	fmt.Fprintf(&b, "}\n\n")

	fmt.Fprintf(&b, "func RenderAny(w io.Writer, data any) error {\n")
	fmt.Fprintf(&b, "\treturn Template().Execute(w, data)\n")
	fmt.Fprintf(&b, "}\n")

	return b.String(), nil
}
