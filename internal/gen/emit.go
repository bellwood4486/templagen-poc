package gen

import (
	"fmt"
	"maps"
	"path/filepath"
	"slices"
	"strings"

	"github.com/bellwood4486/templagen-poc/internal/scan"
	"github.com/bellwood4486/templagen-poc/internal/typing"
	"github.com/bellwood4486/templagen-poc/internal/util"
)

// Unit は単一のテンプレート処理単位
type Unit struct {
	Pkg           string // 出力パッケージ名
	SourcePath    string // 埋め込むテンプレファイルのパス（go:embedディレクティブで使用）
	SourceLiteral string // テンプレ本文
}

// Emit は複数のテンプレートから1つの統合Goファイルを生成する
// 単一テンプレートの場合も同じフォーマットで生成される
func Emit(units []Unit) (string, error) {
	if len(units) == 0 {
		return "", fmt.Errorf("no units provided")
	}

	// 各テンプレートごとの処理結果を保持
	type templateData struct {
		name       string              // テンプレート名（例: "user", "user_list"）
		typeName   string              // 型名（例: "User", "UserList"）
		sourcePath string              // 埋め込むファイルパス
		varName    string              // embed変数名（例: "userTplSource"）
		typed      *typing.TypedSchema // 型情報
	}

	templates := make([]templateData, 0, len(units))
	allImports := make(map[string]struct{})

	// デフォルトのimport
	allImports["io"] = struct{}{}
	allImports["text/template"] = struct{}{}
	allImports["embed"] = struct{}{}
	allImports["fmt"] = struct{}{}

	// 各テンプレートを処理
	for _, unit := range units {
		// テンプレート名を抽出
		templateName := extractTemplateName(unit.SourcePath)
		typeName := util.Export(templateName)

		// テンプレートをスキャン
		sch, err := scan.ScanTemplate(unit.SourceLiteral)
		if err != nil {
			return "", fmt.Errorf("failed to scan template %s: %w", unit.SourcePath, err)
		}

		// 型解決
		typed, err := typing.Resolve(sch, unit.SourceLiteral)
		if err != nil {
			return "", fmt.Errorf("failed to resolve types for %s: %w", unit.SourcePath, err)
		}

		// 必要なimportを収集
		for _, imp := range typed.RequiredImports {
			allImports[imp] = struct{}{}
		}

		// テンプレートデータを追加
		templates = append(templates, templateData{
			name:       templateName,
			typeName:   typeName,
			sourcePath: unit.SourcePath,
			varName:    templateName + "TplSource",
			typed:      typed,
		})
	}

	// テンプレート名でソート（出力を安定させるため）
	slices.SortFunc(templates, func(a, b templateData) int {
		return strings.Compare(a.name, b.name)
	})

	// コード生成
	var b strings.Builder
	pkg := units[0].Pkg // すべて同じパッケージ名のはず

	// ヘッダー
	write(&b, "// Code generated by templagen; DO NOT EDIT.\n")
	write(&b, "package %s\n\n", pkg)

	// import セクション
	write(&b, "import (\n")
	keys := slices.Sorted(maps.Keys(allImports))
	for _, k := range keys {
		if k == "embed" {
			write(&b, "\t_ %q\n", k)
		} else {
			write(&b, "\t%q\n", k)
		}
	}
	write(&b, ")\n\n")

	// TemplateName型と構造体ベースの名前空間の生成
	write(&b, "// TemplateName is a type-safe template name\n")
	write(&b, "type TemplateName string\n\n")
	write(&b, "// Template provides type-safe access to template names\n")
	write(&b, "var Template = struct {\n")
	for _, tmpl := range templates {
		write(&b, "\t%s TemplateName\n", tmpl.typeName)
	}
	write(&b, "}{\n")
	for _, tmpl := range templates {
		write(&b, "\t%s: %q,\n", tmpl.typeName, tmpl.name)
	}
	write(&b, "}\n\n")

	// 各テンプレートのembed宣言
	for _, tmpl := range templates {
		write(&b, "//go:embed %s\n", tmpl.sourcePath)
		write(&b, "var %s string\n\n", tmpl.varName)
	}

	// Templates map - initialized once at package initialization
	write(&b, "var templates = map[TemplateName]*template.Template{\n")
	for _, tmpl := range templates {
		fieldRef := "Template." + tmpl.typeName
		write(&b, "\t%s: template.Must(template.New(string(%s)).Option(%q).Parse(%s)),\n",
			fieldRef, fieldRef, "missingkey=error", tmpl.varName)
	}
	write(&b, "}\n\n")

	// Templates() function - returns the pre-initialized map
	write(&b, "// Templates returns a map of all templates\n")
	write(&b, "func Templates() map[TemplateName]*template.Template {\n")
	write(&b, "\treturn templates\n")
	write(&b, "}\n\n")

	// 汎用Render関数（共通部分に配置）
	write(&b, "// Render renders a template by name with the given data\n")
	write(&b, "func Render(w io.Writer, name TemplateName, data any) error {\n")
	write(&b, "\ttmpl, ok := templates[name]\n")
	write(&b, "\tif !ok {\n")
	write(&b, "\t\treturn fmt.Errorf(\"template %%q not found\", name)\n")
	write(&b, "\t}\n")
	write(&b, "\treturn tmpl.Execute(w, data)\n")
	write(&b, "}\n\n")

	// 各テンプレートごとにブロックを生成
	generatedTypes := make(map[string]bool)
	for _, tmpl := range templates {
		// テンプレートブロックのセパレータ
		write(&b, "// ============================================================\n")
		write(&b, "// %s template\n", tmpl.name)
		write(&b, "// ============================================================\n\n")

		// 名前付き型の生成
		for _, namedType := range tmpl.typed.NamedTypes {
			// 型名の衝突を避けるため、プレフィックスを付ける
			typeName := tmpl.typeName + namedType.Name
			if generatedTypes[typeName] {
				continue // すでに生成済み
			}
			generatedTypes[typeName] = true

			write(&b, "type %s struct {\n", typeName)
			// フィールドをソートして順序を安定化
			fieldNames := slices.Sorted(maps.Keys(namedType.Fields))
			for _, fieldName := range fieldNames {
				field := namedType.Fields[fieldName]
				// フィールドの型名も調整が必要な場合がある
				goType := adjustTypeForTemplate(field.GoType, tmpl.typeName)
				write(&b, "\t%s %s\n", field.Name, goType)
			}
			write(&b, "}\n\n")
		}

		// メインのパラメータ型を生成
		write(&b, "// %s represents parameters for %s template\n", tmpl.typeName, tmpl.name)
		write(&b, "type %s struct {\n", tmpl.typeName)
		// トップレベルフィールドをソートして順序を安定化
		topFieldNames := slices.Sorted(maps.Keys(tmpl.typed.Fields))
		for _, fieldName := range topFieldNames {
			field := tmpl.typed.Fields[fieldName]
			// フィールドの型名も調整が必要な場合がある
			goType := adjustTypeForTemplate(field.GoType, tmpl.typeName)
			write(&b, "\t%s %s\n", field.Name, goType)
		}
		write(&b, "}\n\n")

		// Render関数の生成
		funcName := "Render" + tmpl.typeName
		fieldRef := "Template." + tmpl.typeName
		write(&b, "// %s renders the %s template\n", funcName, tmpl.name)
		write(&b, "func %s(w io.Writer, p %s) error {\n", funcName, tmpl.typeName)
		write(&b, "\ttmpl, ok := templates[%s]\n", fieldRef)
		write(&b, "\tif !ok {\n")
		write(&b, "\t\treturn fmt.Errorf(\"template %%q not found\", %s)\n", fieldRef)
		write(&b, "\t}\n")
		write(&b, "\treturn tmpl.Execute(w, p)\n")
		write(&b, "}\n\n")
	}

	return b.String(), nil
}

// extractTemplateName はファイルパスからテンプレート名を抽出する
// 例: "templates/user_list.tmpl" -> "user_list"
// 例: "email.tmpl" -> "email"
func extractTemplateName(path string) string {
	// ベース名を取得
	base := filepath.Base(path)

	// 拡張子を削除
	name := strings.TrimSuffix(base, filepath.Ext(base))

	// 数字プレフィックスを削除（例: "01_header" -> "header"）
	if len(name) > 3 && name[0] >= '0' && name[0] <= '9' {
		if name[1] >= '0' && name[1] <= '9' {
			if name[2] == '_' || name[2] == '-' {
				name = name[3:]
			}
		} else if name[1] == '_' || name[1] == '-' {
			name = name[2:]
		}
	}

	// ハイフンをアンダースコアに変換
	name = strings.ReplaceAll(name, "-", "_")

	return name
}

// adjustTypeForTemplate は型名をテンプレート固有に調整する
func adjustTypeForTemplate(goType string, templatePrefix string) string {
	// 名前付き型への参照を調整
	// 例: "[]ItemsItem" -> "[]UserItemsItem" (Userテンプレートの場合)
	// これは簡略化された実装。実際にはより複雑な型の処理が必要

	// スライスの場合
	if strings.HasPrefix(goType, "[]") {
		elemType := goType[2:]
		if !isBuiltinType(elemType) && !strings.Contains(elemType, ".") {
			// カスタム型の場合、プレフィックスを付ける
			return "[]" + templatePrefix + elemType
		}
	}

	// マップの場合
	if strings.HasPrefix(goType, "map[string]") {
		elemType := goType[11:] // "map[string]" の後の部分
		if !isBuiltinType(elemType) && !strings.Contains(elemType, ".") {
			return "map[string]" + templatePrefix + elemType
		}
	}

	// 単純な名前付き型の場合
	if !isBuiltinType(goType) && !strings.Contains(goType, ".") &&
		!strings.Contains(goType, "[") && !strings.HasPrefix(goType, "*") {
		return templatePrefix + goType
	}

	return goType
}

func isBuiltinType(typeName string) bool {
	builtins := []string{
		"string", "int", "int8", "int16", "int32", "int64",
		"uint", "uint8", "uint16", "uint32", "uint64",
		"float32", "float64", "bool", "byte", "rune", "any",
		"time.Time", "error",
	}
	for _, b := range builtins {
		if typeName == b {
			return true
		}
	}
	return false
}

// write は strings.Builder への書き込みヘルパー
// 万が一失敗した場合は panic する
func write(b *strings.Builder, format string, args ...any) {
	_, err := fmt.Fprintf(b, format, args...)
	if err != nil {
		panic(err)
	}
}
