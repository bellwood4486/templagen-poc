package gen

import (
	"fmt"
	"maps"
	"slices"
	"strings"

	"github.com/bellwood4486/templagen-poc/internal/scan"
	"github.com/bellwood4486/templagen-poc/internal/typing"
)

type Unit struct {
	Pkg           string // 出力パッケージ名
	SourcePath    string // 埋め込むテンプレファイルのパス
	SourceLiteral string // テンプレ本文
}

func Emit(u Unit) (string, error) {
	// 1. テンプレートをスキャン
	sch, err := scan.ScanTemplate(u.SourceLiteral)
	if err != nil {
		return "", fmt.Errorf("failed to scan template: %w", err)
	}

	// 2. 型解決
	typed, err := typing.Resolve(sch, u.SourceLiteral)
	if err != nil {
		return "", fmt.Errorf("failed to resolve types: %w", err)
	}

	// 3. コード生成
	return generateCode(typed, u.Pkg, u.SourcePath), nil
}

// generateCode generates Go code from typed schema
func generateCode(typed *typing.TypedSchema, pkg string, sourcePath string) string {
	imports := map[string]struct{}{
		"io":            {},
		"text/template": {},
		"embed":         {},
	}

	// 必要なimport追加
	for _, imp := range typed.RequiredImports {
		imports[imp] = struct{}{}
	}

	var b strings.Builder

	// ヘッダー
	fmt.Fprintf(&b, "// Code generated by templagen; DO NOT EDIT.\n")
	fmt.Fprintf(&b, "package %s\n\n", pkg)

	// import セクション
	fmt.Fprintf(&b, "import (\n")
	keys := slices.Sorted(maps.Keys(imports))
	for _, k := range keys {
		if k == "embed" {
			fmt.Fprintf(&b, "\t_ %q\n", k)
		} else {
			fmt.Fprintf(&b, "\t%q\n", k)
		}
	}
	fmt.Fprintf(&b, ")\n\n")

	// テンプレ埋め込み
	fmt.Fprintf(&b, "//go:embed %s\n", sourcePath)
	fmt.Fprintf(&b, "var tplSource string\n\n")

	// Template関数
	fmt.Fprintf(&b, "func Template() *template.Template {\n")
	fmt.Fprintf(&b, "\treturn template.Must(template.New(%q).Option(%q).Parse(tplSource))\n", "tpl", "missingkey=error")
	fmt.Fprintf(&b, "}\n\n")

	// 名前付き型の生成
	for _, namedType := range typed.NamedTypes {
		fmt.Fprintf(&b, "type %s struct {\n", namedType.Name)
		// フィールドをソートして順序を安定化
		fieldNames := slices.Sorted(maps.Keys(namedType.Fields))
		for _, fieldName := range fieldNames {
			field := namedType.Fields[fieldName]
			fmt.Fprintf(&b, "\t%s %s\n", field.Name, field.GoType)
		}
		fmt.Fprintf(&b, "}\n\n")
	}

	// Params型の生成
	fmt.Fprintf(&b, "type Params struct {\n")
	// トップレベルフィールドをソートして順序を安定化
	topFieldNames := slices.Sorted(maps.Keys(typed.Fields))
	for _, fieldName := range topFieldNames {
		field := typed.Fields[fieldName]
		fmt.Fprintf(&b, "\t%s %s\n", field.Name, field.GoType)
	}
	fmt.Fprintf(&b, "}\n\n")

	// Render関数群
	fmt.Fprintf(&b, "func Render(w io.Writer, p Params) error { return Template().Execute(w, p) }\n\n")
	fmt.Fprintf(&b, "func RenderAny(w io.Writer, data any) error { return Template().Execute(w, data) }\n")

	return b.String()
}
