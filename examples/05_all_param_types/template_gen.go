// Code generated by tmpltype; DO NOT EDIT.
package main

import (
	_ "embed"
	"fmt"
	"io"
	"text/template"
)

// TemplateName is a type-safe template name
type TemplateName string

// Template provides type-safe access to template names
var Template = struct {
	BasicTypes   TemplateName
	ComplexTypes TemplateName
	MapTypes     TemplateName
	PointerTypes TemplateName
	SliceTypes   TemplateName
	StructTypes  TemplateName
}{
	BasicTypes:   "basic_types",
	ComplexTypes: "complex_types",
	MapTypes:     "map_types",
	PointerTypes: "pointer_types",
	SliceTypes:   "slice_types",
	StructTypes:  "struct_types",
}

//go:embed templates/basic_types.tmpl
var basic_typesTplSource string

//go:embed templates/complex_types.tmpl
var complex_typesTplSource string

//go:embed templates/map_types.tmpl
var map_typesTplSource string

//go:embed templates/pointer_types.tmpl
var pointer_typesTplSource string

//go:embed templates/slice_types.tmpl
var slice_typesTplSource string

//go:embed templates/struct_types.tmpl
var struct_typesTplSource string

func newTemplate(name TemplateName, source string) *template.Template {
	return template.Must(template.New(string(name)).Option("missingkey=error").Parse(source))
}

var templates = map[TemplateName]*template.Template{
	Template.BasicTypes:   newTemplate(Template.BasicTypes, basic_typesTplSource),
	Template.ComplexTypes: newTemplate(Template.ComplexTypes, complex_typesTplSource),
	Template.MapTypes:     newTemplate(Template.MapTypes, map_typesTplSource),
	Template.PointerTypes: newTemplate(Template.PointerTypes, pointer_typesTplSource),
	Template.SliceTypes:   newTemplate(Template.SliceTypes, slice_typesTplSource),
	Template.StructTypes:  newTemplate(Template.StructTypes, struct_typesTplSource),
}

// Templates returns a map of all templates
func Templates() map[TemplateName]*template.Template {
	return templates
}

// Render renders a template by name with the given data
func Render(w io.Writer, name TemplateName, data any) error {
	tmpl, ok := templates[name]
	if !ok {
		return fmt.Errorf("template %q not found", name)
	}
	return tmpl.Execute(w, data)
}

// ============================================================
// basic_types template
// ============================================================

// BasicTypes represents parameters for basic_types template
type BasicTypes struct {
	Active bool
	Age    int
	Name   string
	Price  float64
	Score  int64
}

// RenderBasicTypes renders the basic_types template
func RenderBasicTypes(w io.Writer, p BasicTypes) error {
	tmpl, ok := templates[Template.BasicTypes]
	if !ok {
		return fmt.Errorf("template %q not found", Template.BasicTypes)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// complex_types template
// ============================================================

type ComplexTypesItemsItem struct {
	ID    int64
	Price float64
	Tags  []string
	Title string
}

type ComplexTypesRecordsItem struct {
	Age   int
	Name  string
	Score *int
}

// ComplexTypes represents parameters for complex_types template
type ComplexTypes struct {
	Items         []ComplexTypesItemsItem
	OptionalItems *[]string
	Records       []ComplexTypesRecordsItem
}

// RenderComplexTypes renders the complex_types template
func RenderComplexTypes(w io.Writer, p ComplexTypes) error {
	tmpl, ok := templates[Template.ComplexTypes]
	if !ok {
		return fmt.Errorf("template %q not found", Template.ComplexTypes)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// map_types template
// ============================================================

// MapTypes represents parameters for map_types template
type MapTypes struct {
	Counters map[string]int
	Features map[string]bool
	Metadata map[string]string
	Prices   map[string]float64
}

// RenderMapTypes renders the map_types template
func RenderMapTypes(w io.Writer, p MapTypes) error {
	tmpl, ok := templates[Template.MapTypes]
	if !ok {
		return fmt.Errorf("template %q not found", Template.MapTypes)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// pointer_types template
// ============================================================

// PointerTypes represents parameters for pointer_types template
type PointerTypes struct {
	Discount    *float64
	Email       *string
	MiddleScore *int
	PhoneNumber *string
}

// RenderPointerTypes renders the pointer_types template
func RenderPointerTypes(w io.Writer, p PointerTypes) error {
	tmpl, ok := templates[Template.PointerTypes]
	if !ok {
		return fmt.Errorf("template %q not found", Template.PointerTypes)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// slice_types template
// ============================================================

// SliceTypes represents parameters for slice_types template
type SliceTypes struct {
	CategoryIDs []int
	Flags       []bool
	Ratings     []float64
	Tags        []string
}

// RenderSliceTypes renders the slice_types template
func RenderSliceTypes(w io.Writer, p SliceTypes) error {
	tmpl, ok := templates[Template.SliceTypes]
	if !ok {
		return fmt.Errorf("template %q not found", Template.SliceTypes)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// struct_types template
// ============================================================

type StructTypesProduct struct {
	InStock bool
	Price   float64
	SKU     string
}

type StructTypesUser struct {
	Email string
	ID    int64
	Name  string
}

// StructTypes represents parameters for struct_types template
type StructTypes struct {
	Product StructTypesProduct
	User    StructTypesUser
}

// RenderStructTypes renders the struct_types template
func RenderStructTypes(w io.Writer, p StructTypes) error {
	tmpl, ok := templates[Template.StructTypes]
	if !ok {
		return fmt.Errorf("template %q not found", Template.StructTypes)
	}
	return tmpl.Execute(w, p)
}
