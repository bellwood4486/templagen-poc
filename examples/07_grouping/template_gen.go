// Code generated by tmpltype; DO NOT EDIT.
package main

import (
	_ "embed"
	"fmt"
	"io"
	"text/template"
)

// TemplateName is a type-safe template name
type TemplateName string

// Template provides type-safe access to template names
var Template = struct {
	MailAccountCreated struct {
		Content TemplateName
		Title   TemplateName
	}
	MailArticleCreated struct {
		Content TemplateName
		Title   TemplateName
	}
	MailInvite struct {
		Content TemplateName
		Title   TemplateName
	}
}{
	MailAccountCreated: struct {
		Content TemplateName
		Title   TemplateName
	}{
		Content: "mail_account_created/content",
		Title:   "mail_account_created/title",
	},
	MailArticleCreated: struct {
		Content TemplateName
		Title   TemplateName
	}{
		Content: "mail_article_created/content",
		Title:   "mail_article_created/title",
	},
	MailInvite: struct {
		Content TemplateName
		Title   TemplateName
	}{
		Content: "mail_invite/content",
		Title:   "mail_invite/title",
	},
}

//go:embed templates/02_mail_account_created/content.tmpl
var mail_account_created_contentTplSource string

//go:embed templates/02_mail_account_created/title.tmpl
var mail_account_created_titleTplSource string

//go:embed templates/03_mail_article_created/content.tmpl
var mail_article_created_contentTplSource string

//go:embed templates/03_mail_article_created/title.tmpl
var mail_article_created_titleTplSource string

//go:embed templates/01_mail_invite/content.tmpl
var mail_invite_contentTplSource string

//go:embed templates/01_mail_invite/title.tmpl
var mail_invite_titleTplSource string

func newTemplate(name TemplateName, source string) *template.Template {
	return template.Must(template.New(string(name)).Option("missingkey=error").Parse(source))
}

var templates = map[TemplateName]*template.Template{
	Template.MailAccountCreated.Content: newTemplate(Template.MailAccountCreated.Content, mail_account_created_contentTplSource),
	Template.MailAccountCreated.Title:   newTemplate(Template.MailAccountCreated.Title, mail_account_created_titleTplSource),
	Template.MailArticleCreated.Content: newTemplate(Template.MailArticleCreated.Content, mail_article_created_contentTplSource),
	Template.MailArticleCreated.Title:   newTemplate(Template.MailArticleCreated.Title, mail_article_created_titleTplSource),
	Template.MailInvite.Content:         newTemplate(Template.MailInvite.Content, mail_invite_contentTplSource),
	Template.MailInvite.Title:           newTemplate(Template.MailInvite.Title, mail_invite_titleTplSource),
}

// Templates returns a map of all templates
func Templates() map[TemplateName]*template.Template {
	return templates
}

// Render renders a template by name with the given data
func Render(w io.Writer, name TemplateName, data any) error {
	tmpl, ok := templates[name]
	if !ok {
		return fmt.Errorf("template %q not found", name)
	}
	return tmpl.Execute(w, data)
}

// ============================================================
// mail_account_created/content template
// ============================================================

// MailAccountCreatedContent represents parameters for mail_account_created/content template
type MailAccountCreatedContent struct {
	Email    string
	SiteName string
	Username string
}

// RenderMailAccountCreatedContent renders the mail_account_created/content template
func RenderMailAccountCreatedContent(w io.Writer, p MailAccountCreatedContent) error {
	tmpl, ok := templates[Template.MailAccountCreated.Content]
	if !ok {
		return fmt.Errorf("template %q not found", Template.MailAccountCreated.Content)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// mail_account_created/title template
// ============================================================

// MailAccountCreatedTitle represents parameters for mail_account_created/title template
type MailAccountCreatedTitle struct {
	SiteName string
}

// RenderMailAccountCreatedTitle renders the mail_account_created/title template
func RenderMailAccountCreatedTitle(w io.Writer, p MailAccountCreatedTitle) error {
	tmpl, ok := templates[Template.MailAccountCreated.Title]
	if !ok {
		return fmt.Errorf("template %q not found", Template.MailAccountCreated.Title)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// mail_article_created/content template
// ============================================================

// MailArticleCreatedContent represents parameters for mail_article_created/content template
type MailArticleCreatedContent struct {
	ArticleTitle string
	ArticleURL   string
	AuthorName   string
	Excerpt      string
	SiteName     string
}

// RenderMailArticleCreatedContent renders the mail_article_created/content template
func RenderMailArticleCreatedContent(w io.Writer, p MailArticleCreatedContent) error {
	tmpl, ok := templates[Template.MailArticleCreated.Content]
	if !ok {
		return fmt.Errorf("template %q not found", Template.MailArticleCreated.Content)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// mail_article_created/title template
// ============================================================

// MailArticleCreatedTitle represents parameters for mail_article_created/title template
type MailArticleCreatedTitle struct {
	ArticleTitle string
}

// RenderMailArticleCreatedTitle renders the mail_article_created/title template
func RenderMailArticleCreatedTitle(w io.Writer, p MailArticleCreatedTitle) error {
	tmpl, ok := templates[Template.MailArticleCreated.Title]
	if !ok {
		return fmt.Errorf("template %q not found", Template.MailArticleCreated.Title)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// mail_invite/content template
// ============================================================

// MailInviteContent represents parameters for mail_invite/content template
type MailInviteContent struct {
	InviteURL     string
	InviterName   string
	RecipientName string
	SiteName      string
}

// RenderMailInviteContent renders the mail_invite/content template
func RenderMailInviteContent(w io.Writer, p MailInviteContent) error {
	tmpl, ok := templates[Template.MailInvite.Content]
	if !ok {
		return fmt.Errorf("template %q not found", Template.MailInvite.Content)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// mail_invite/title template
// ============================================================

// MailInviteTitle represents parameters for mail_invite/title template
type MailInviteTitle struct {
	InviterName string
	SiteName    string
}

// RenderMailInviteTitle renders the mail_invite/title template
func RenderMailInviteTitle(w io.Writer, p MailInviteTitle) error {
	tmpl, ok := templates[Template.MailInvite.Title]
	if !ok {
		return fmt.Errorf("template %q not found", Template.MailInvite.Title)
	}
	return tmpl.Execute(w, p)
}
