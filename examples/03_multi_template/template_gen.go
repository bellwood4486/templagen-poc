// Code generated by templagen; DO NOT EDIT.
package main

import (
	_ "embed"
	"fmt"
	"io"
	"text/template"
)

// TemplateName is a type-safe template name
type TemplateName string

// Template provides type-safe access to template names
var Template = struct {
	Footer TemplateName
	Header TemplateName
	Nav    TemplateName
}{
	Footer: "footer",
	Header: "header",
	Nav:    "nav",
}

//go:embed templates/footer.tmpl
var footerTplSource string

//go:embed templates/header.tmpl
var headerTplSource string

//go:embed templates/nav.tmpl
var navTplSource string

func newTemplate(name TemplateName, source string) *template.Template {
	return template.Must(template.New(string(name)).Option("missingkey=error").Parse(source))
}

var templates = map[TemplateName]*template.Template{
	Template.Footer: newTemplate(Template.Footer, footerTplSource),
	Template.Header: newTemplate(Template.Header, headerTplSource),
	Template.Nav:    newTemplate(Template.Nav, navTplSource),
}

// Templates returns a map of all templates
func Templates() map[TemplateName]*template.Template {
	return templates
}

// Render renders a template by name with the given data
func Render(w io.Writer, name TemplateName, data any) error {
	tmpl, ok := templates[name]
	if !ok {
		return fmt.Errorf("template %q not found", name)
	}
	return tmpl.Execute(w, data)
}

// ============================================================
// footer template
// ============================================================

type FooterLinksItem struct {
	Text string
	URL  string
}

// Footer represents parameters for footer template
type Footer struct {
	CompanyName string
	Links       []FooterLinksItem
	Year        int
}

// RenderFooter renders the footer template
func RenderFooter(w io.Writer, p Footer) error {
	tmpl, ok := templates[Template.Footer]
	if !ok {
		return fmt.Errorf("template %q not found", Template.Footer)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// header template
// ============================================================

// Header represents parameters for header template
type Header struct {
	Subtitle *string
	Title    string
}

// RenderHeader renders the header template
func RenderHeader(w io.Writer, p Header) error {
	tmpl, ok := templates[Template.Header]
	if !ok {
		return fmt.Errorf("template %q not found", Template.Header)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// nav template
// ============================================================

type NavItemsItem struct {
	Active bool
	Link   string
	Name   string
}

type NavCurrentUser struct {
	IsAdmin bool
	Name    string
}

// Nav represents parameters for nav template
type Nav struct {
	CurrentUser NavCurrentUser
	Items       []NavItemsItem
}

// RenderNav renders the nav template
func RenderNav(w io.Writer, p Nav) error {
	tmpl, ok := templates[Template.Nav]
	if !ok {
		return fmt.Errorf("template %q not found", Template.Nav)
	}
	return tmpl.Execute(w, p)
}
