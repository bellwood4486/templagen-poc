// Code generated by templagen; DO NOT EDIT.
package main

import (
	_ "embed"
	"fmt"
	"io"
	"text/template"
)

//go:embed templates/footer.tmpl
var footerTplSource string

//go:embed templates/header.tmpl
var headerTplSource string

//go:embed templates/nav.tmpl
var navTplSource string

var templates = map[string]*template.Template{
	"footer": template.Must(template.New("footer").Option("missingkey=error").Parse(footerTplSource)),
	"header": template.Must(template.New("header").Option("missingkey=error").Parse(headerTplSource)),
	"nav": template.Must(template.New("nav").Option("missingkey=error").Parse(navTplSource)),
}

// Templates returns a map of all templates
func Templates() map[string]*template.Template {
	return templates
}

// Render renders a template by name with the given data
func Render(w io.Writer, name string, data any) error {
	tmpl, ok := templates[name]
	if !ok {
		return fmt.Errorf("template %q not found", name)
	}
	return tmpl.Execute(w, data)
}

// ============================================================
// footer template
// ============================================================

type FooterLinksItem struct {
	Text string
	URL string
}

// Footer represents parameters for footer template
type Footer struct {
	CompanyName string
	Links []FooterLinksItem
	Year int
}

// RenderFooter renders the footer template
func RenderFooter(w io.Writer, p Footer) error {
	tmpl, ok := templates["footer"]
	if !ok {
		return fmt.Errorf("template %q not found", "footer")
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// header template
// ============================================================

// Header represents parameters for header template
type Header struct {
	Subtitle *string
	Title string
}

// RenderHeader renders the header template
func RenderHeader(w io.Writer, p Header) error {
	tmpl, ok := templates["header"]
	if !ok {
		return fmt.Errorf("template %q not found", "header")
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// nav template
// ============================================================

type NavItemsItem struct {
	Active bool
	Link string
	Name string
}

type NavCurrentUser struct {
	IsAdmin bool
	Name string
}

// Nav represents parameters for nav template
type Nav struct {
	CurrentUser NavCurrentUser
	Items []NavItemsItem
}

// RenderNav renders the nav template
func RenderNav(w io.Writer, p Nav) error {
	tmpl, ok := templates["nav"]
	if !ok {
		return fmt.Errorf("template %q not found", "nav")
	}
	return tmpl.Execute(w, p)
}

