// Code generated by templagen; DO NOT EDIT.
package main

import (
	_ "embed"
	"fmt"
	"io"
	"text/template"
)

// TemplateName is a type-safe template name
type TemplateName string

const (
	TemplateNameFooter TemplateName = "footer"
	TemplateNameHeader TemplateName = "header"
	TemplateNameNav TemplateName = "nav"
)

//go:embed templates/footer.tmpl
var footerTplSource string

//go:embed templates/header.tmpl
var headerTplSource string

//go:embed templates/nav.tmpl
var navTplSource string

var templates = map[TemplateName]*template.Template{
	TemplateNameFooter: template.Must(template.New(string(TemplateNameFooter)).Option("missingkey=error").Parse(footerTplSource)),
	TemplateNameHeader: template.Must(template.New(string(TemplateNameHeader)).Option("missingkey=error").Parse(headerTplSource)),
	TemplateNameNav: template.Must(template.New(string(TemplateNameNav)).Option("missingkey=error").Parse(navTplSource)),
}

// Templates returns a map of all templates
func Templates() map[TemplateName]*template.Template {
	return templates
}

// Render renders a template by name with the given data
func Render(w io.Writer, name TemplateName, data any) error {
	tmpl, ok := templates[name]
	if !ok {
		return fmt.Errorf("template %q not found", name)
	}
	return tmpl.Execute(w, data)
}

// ============================================================
// footer template
// ============================================================

type FooterLinksItem struct {
	Text string
	URL string
}

// Footer represents parameters for footer template
type Footer struct {
	CompanyName string
	Links []FooterLinksItem
	Year int
}

// RenderFooter renders the footer template
func RenderFooter(w io.Writer, p Footer) error {
	tmpl, ok := templates[TemplateNameFooter]
	if !ok {
		return fmt.Errorf("template %q not found", TemplateNameFooter)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// header template
// ============================================================

// Header represents parameters for header template
type Header struct {
	Subtitle *string
	Title string
}

// RenderHeader renders the header template
func RenderHeader(w io.Writer, p Header) error {
	tmpl, ok := templates[TemplateNameHeader]
	if !ok {
		return fmt.Errorf("template %q not found", TemplateNameHeader)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// nav template
// ============================================================

type NavItemsItem struct {
	Active bool
	Link string
	Name string
}

type NavCurrentUser struct {
	IsAdmin bool
	Name string
}

// Nav represents parameters for nav template
type Nav struct {
	CurrentUser NavCurrentUser
	Items []NavItemsItem
}

// RenderNav renders the nav template
func RenderNav(w io.Writer, p Nav) error {
	tmpl, ok := templates[TemplateNameNav]
	if !ok {
		return fmt.Errorf("template %q not found", TemplateNameNav)
	}
	return tmpl.Execute(w, p)
}

