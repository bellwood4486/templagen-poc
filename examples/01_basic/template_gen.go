// Code generated by templagen; DO NOT EDIT.
package main

import (
	_ "embed"
	"fmt"
	"io"
	"text/template"
)

// TemplateName is a type-safe template name
type TemplateName string

const (
	TemplateNameEmail TemplateName = "email"
)

//go:embed templates/email.tmpl
var emailTplSource string

var templates = map[TemplateName]*template.Template{
	TemplateNameEmail: template.Must(template.New(string(TemplateNameEmail)).Option("missingkey=error").Parse(emailTplSource)),
}

// Templates returns a map of all templates
func Templates() map[TemplateName]*template.Template {
	return templates
}

// Render renders a template by name with the given data
func Render(w io.Writer, name TemplateName, data any) error {
	tmpl, ok := templates[name]
	if !ok {
		return fmt.Errorf("template %q not found", name)
	}
	return tmpl.Execute(w, data)
}

// ============================================================
// email template
// ============================================================

type EmailUser struct {
	Name string
}

// Email represents parameters for email template
type Email struct {
	Message string
	User EmailUser
}

// RenderEmail renders the email template
func RenderEmail(w io.Writer, p Email) error {
	tmpl, ok := templates[TemplateNameEmail]
	if !ok {
		return fmt.Errorf("template %q not found", TemplateNameEmail)
	}
	return tmpl.Execute(w, p)
}

