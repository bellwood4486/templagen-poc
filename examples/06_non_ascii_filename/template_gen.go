// Code generated by templagen; DO NOT EDIT.
package main

import (
	_ "embed"
	"fmt"
	"io"
	"text/template"
)

// TemplateName is a type-safe template name
type TemplateName string

// Template provides type-safe access to template names
var Template = struct {
	メール TemplateName
}{
	メール: "メール",
}

//go:embed templates/メール.tmpl
var メールTplSource string

var templates = map[TemplateName]*template.Template{
	Template.メール: template.Must(template.New(string(Template.メール)).Option("missingkey=error").Parse(メールTplSource)),
}

// Templates returns a map of all templates
func Templates() map[TemplateName]*template.Template {
	return templates
}

// Render renders a template by name with the given data
func Render(w io.Writer, name TemplateName, data any) error {
	tmpl, ok := templates[name]
	if !ok {
		return fmt.Errorf("template %q not found", name)
	}
	return tmpl.Execute(w, data)
}

// ============================================================
// メール template
// ============================================================

// メール represents parameters for メール template
type メール struct {
	Name string
}

// Renderメール renders the メール template
func Renderメール(w io.Writer, p メール) error {
	tmpl, ok := templates[Template.メール]
	if !ok {
		return fmt.Errorf("template %q not found", Template.メール)
	}
	return tmpl.Execute(w, p)
}

