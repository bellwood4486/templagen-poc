// Code generated by templagen; DO NOT EDIT.
package main

import (
	_ "embed"
	"fmt"
	"io"
	"text/template"
)

// TemplateName is a type-safe template name
type TemplateName string

const (
	TemplateNameAdvanced TemplateName = "advanced"
	TemplateNameBasic_fields TemplateName = "basic_fields"
	TemplateNameCollections TemplateName = "collections"
	TemplateNameControl_flow TemplateName = "control_flow"
)

//go:embed templates/advanced.tmpl
var advancedTplSource string

//go:embed templates/basic_fields.tmpl
var basic_fieldsTplSource string

//go:embed templates/collections.tmpl
var collectionsTplSource string

//go:embed templates/control_flow.tmpl
var control_flowTplSource string

var templates = map[TemplateName]*template.Template{
	TemplateNameAdvanced: template.Must(template.New(string(TemplateNameAdvanced)).Option("missingkey=error").Parse(advancedTplSource)),
	TemplateNameBasic_fields: template.Must(template.New(string(TemplateNameBasic_fields)).Option("missingkey=error").Parse(basic_fieldsTplSource)),
	TemplateNameCollections: template.Must(template.New(string(TemplateNameCollections)).Option("missingkey=error").Parse(collectionsTplSource)),
	TemplateNameControl_flow: template.Must(template.New(string(TemplateNameControl_flow)).Option("missingkey=error").Parse(control_flowTplSource)),
}

// Templates returns a map of all templates
func Templates() map[TemplateName]*template.Template {
	return templates
}

// Render renders a template by name with the given data
func Render(w io.Writer, name TemplateName, data any) error {
	tmpl, ok := templates[name]
	if !ok {
		return fmt.Errorf("template %q not found", name)
	}
	return tmpl.Execute(w, data)
}

// ============================================================
// advanced template
// ============================================================

type AdvancedCompany struct {
	Department AdvancedDepartment
}

type AdvancedDepartment struct {
	Team AdvancedTeam
}

type AdvancedManager struct {
	Name string
}

type AdvancedProject struct {
	Description string
	Name string
	Tasks []AdvancedTasksItem
}

type AdvancedTasksItem struct {
	Status string
	Title string
}

type AdvancedTeam struct {
	Manager AdvancedManager
}

// Advanced represents parameters for advanced template
type Advanced struct {
	Company AdvancedCompany
	Project AdvancedProject
}

// RenderAdvanced renders the advanced template
func RenderAdvanced(w io.Writer, p Advanced) error {
	tmpl, ok := templates[TemplateNameAdvanced]
	if !ok {
		return fmt.Errorf("template %q not found", TemplateNameAdvanced)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// basic_fields template
// ============================================================

type Basic_fieldsAuthor struct {
	Email string
	Name string
}

// Basic_fields represents parameters for basic_fields template
type Basic_fields struct {
	Author Basic_fieldsAuthor
	Title string
}

// RenderBasic_fields renders the basic_fields template
func RenderBasic_fields(w io.Writer, p Basic_fields) error {
	tmpl, ok := templates[TemplateNameBasic_fields]
	if !ok {
		return fmt.Errorf("template %q not found", TemplateNameBasic_fields)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// collections template
// ============================================================

type CollectionsItemsItem struct {
	Description string
	ID string
	Title string
}

// Collections represents parameters for collections template
type Collections struct {
	Items []CollectionsItemsItem
	Meta map[string]string
}

// RenderCollections renders the collections template
func RenderCollections(w io.Writer, p Collections) error {
	tmpl, ok := templates[TemplateNameCollections]
	if !ok {
		return fmt.Errorf("template %q not found", TemplateNameCollections)
	}
	return tmpl.Execute(w, p)
}

// ============================================================
// control_flow template
// ============================================================

type Control_flowSummary struct {
	Content string
	LastUpdated string
}

// Control_flow represents parameters for control_flow template
type Control_flow struct {
	DefaultMessage string
	Status string
	Summary Control_flowSummary
}

// RenderControl_flow renders the control_flow template
func RenderControl_flow(w io.Writer, p Control_flow) error {
	tmpl, ok := templates[TemplateNameControl_flow]
	if !ok {
		return fmt.Errorf("template %q not found", TemplateNameControl_flow)
	}
	return tmpl.Execute(w, p)
}

