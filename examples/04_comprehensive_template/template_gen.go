// Code generated by templagen; DO NOT EDIT.
package main

import (
	_ "embed"
	"fmt"
	"io"
	"text/template"
)

//go:embed templates/report.tmpl
var reportTplSource string

var templates = map[string]*template.Template{
	"report": template.Must(template.New("report").Option("missingkey=error").Parse(reportTplSource)),
}

// Templates returns a map of all templates
func Templates() map[string]*template.Template {
	return templates
}

type ReportAuthor struct {
	Email string
	Name string
}

type ReportCompany struct {
	Department ReportDepartment
}

type ReportDepartment struct {
	Team ReportTeam
}

type ReportItemsItem struct {
	Description string
	ID string
	Title string
}

type ReportManager struct {
	Name string
}

type ReportProject struct {
	Description string
	Name string
	Tasks []ReportTasksItem
}

type ReportSummary struct {
	Content string
	LastUpdated string
}

type ReportTasksItem struct {
	Status string
	Title string
}

type ReportTeam struct {
	Manager ReportManager
}

// Report represents parameters for report template
type Report struct {
	Author ReportAuthor
	Company ReportCompany
	DefaultMessage string
	Items []ReportItemsItem
	Meta map[string]string
	Project ReportProject
	Status string
	Summary ReportSummary
	Title string
}

// RenderReport renders the report template
func RenderReport(w io.Writer, p Report) error {
	tmpl, ok := templates["report"]
	if !ok {
		return fmt.Errorf("template %q not found", "report")
	}
	return tmpl.Execute(w, p)
}

// Render renders a template by name with the given data
func Render(w io.Writer, name string, data any) error {
	tmpl, ok := templates[name]
	if !ok {
		return fmt.Errorf("template %q not found", name)
	}
	return tmpl.Execute(w, data)
}
