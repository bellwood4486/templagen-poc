// Code generated by tmpltype; DO NOT EDIT.
package main

import (
	_ "embed"
	"fmt"
	"io"
	"text/template"
)

// TemplateName is a type-safe template name
type TemplateName string

// Template provides type-safe access to template names
var Template = struct {
	User TemplateName
}{
	User: "user",
}

//go:embed templates/user.tmpl
var userTplSource string

func newTemplate(name TemplateName, source string) *template.Template {
	return template.Must(template.New(string(name)).Option("missingkey=error").Parse(source))
}

var templates = map[TemplateName]*template.Template{
	Template.User: newTemplate(Template.User, userTplSource),
}

// Templates returns a map of all templates
func Templates() map[TemplateName]*template.Template {
	return templates
}

// Render renders a template by name with the given data
func Render(w io.Writer, name TemplateName, data any) error {
	tmpl, ok := templates[name]
	if !ok {
		return fmt.Errorf("template %q not found", name)
	}
	return tmpl.Execute(w, data)
}

// ============================================================
// user template
// ============================================================

type UserItemsItem struct {
	ID    int64
	Price float64
	Title string
}

type UserUser struct {
	Age   int
	Email *string
	Name  string
}

// User represents parameters for user template
type User struct {
	Items []UserItemsItem
	User  UserUser
}

// RenderUser renders the user template
func RenderUser(w io.Writer, p User) error {
	tmpl, ok := templates[Template.User]
	if !ok {
		return fmt.Errorf("template %q not found", Template.User)
	}
	return tmpl.Execute(w, p)
}
